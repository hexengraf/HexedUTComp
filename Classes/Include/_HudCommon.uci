/*
	COPYRIGHT NOTICE
	Below code is copyright Azarael - used with permission:
	https://steamcommunity.com/app/13230/discussions/0/611702631218438023/#c611702631227999537
*/
#include Classes\Include\EmoticonsHud.uci

//Common rendering code used in all widescreen HUDs
//Courtesy of HUD Scaling Fix by Azarael, modified a bit for portability
simulated final function DrawSpriteTileWidget(Canvas C, SpriteWidget W)
{
	if (!HUDSettings.bEnableWidescreenFix) {
		DrawSpriteWidget(C, W);
		return;
	}

	C.Style = W.RenderStyle;
	C.DrawColor = W.Tints[TeamIndex];

	if (W.Scale == 1.0f || W.ScaleMode == SM_None) {
		C.SetPos(
			(C.ClipX * W.PosX) + (W.OffsetX - Abs(W.TextureCoords.X2 - W.TextureCoords.X1) * XShifts[W.DrawPivot])
				* W.TextureScale * ResScaleY * HUDScale,
			(C.ClipY * W.PosY) + (W.OffsetY - Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1) * YShifts[W.DrawPivot])
				* W.TextureScale * ResScaleY * HUDScale
		);
		C.DrawTile(
			W.WidgetTexture,
			Abs(W.TextureCoords.X2 - W.TextureCoords.X1)
				* W.TextureScale * ResScaleY * HUDScale,
			Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1)
				* W.TextureScale * ResScaleY * HUDScale,
			W.TextureCoords.X1,
			W.TextureCoords.Y1,
			W.TextureCoords.X2 - W.TextureCoords.X1,
			W.TextureCoords.Y2 - W.TextureCoords.Y1
		);
	}
	else {
		switch(W.ScaleMode) {
			case SM_Right:
				C.SetPos(
					(C.ClipX * W.PosX) + (W.OffsetX - Abs(W.TextureCoords.X2 - W.TextureCoords.X1) * XShifts[W.DrawPivot])
						* W.TextureScale * ResScaleY * HUDScale,
					(C.ClipY * W.PosY) + (W.OffsetY - Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1) * YShifts[W.DrawPivot])
						* W.TextureScale * ResScaleY * HUDScale
				);
				C.DrawTile(
					W.WidgetTexture,
					Abs(W.TextureCoords.X2 - W.TextureCoords.X1)
						* W.TextureScale * ResScaleY * HUDScale * W.Scale,
					Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1)
						* W.TextureScale * ResScaleY * HUDScale,
					W.TextureCoords.X1,
					W.TextureCoords.Y1,
					(W.TextureCoords.X2 - W.TextureCoords.X1)
						* W.Scale,
					W.TextureCoords.Y2 - W.TextureCoords.Y1
				);
				break;

			case SM_Left:
				C.SetPos(
					(C.ClipX * W.PosX) + (W.OffsetX - Abs(W.TextureCoords.X2 - W.TextureCoords.X1) * XShifts[W.DrawPivot]
							+ (Abs(W.TextureCoords.X2 - W.TextureCoords.X1) * (1 - W.Scale)))
						* W.TextureScale * ResScaleY * HUDScale,
					(C.ClipY * W.PosY) + (W.OffsetY - Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1) * YShifts[W.DrawPivot])
						* W.TextureScale * ResScaleY * HUDScale
				);
				C.DrawTile(
					W.WidgetTexture,
					Abs(W.TextureCoords.X2 - W.TextureCoords.X1)
						* W.TextureScale * ResScaleY * HUDScale * W.Scale,
					Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1)
						* W.TextureScale * ResScaleY * HUDScale,
					W.TextureCoords.X1
						+ ((W.TextureCoords.X2 - W.TextureCoords.X1) * (1 - W.Scale)),
					W.TextureCoords.Y1,
					(W.TextureCoords.X2 - W.TextureCoords.X1)
						* W.Scale,
					W.TextureCoords.Y2 - W.TextureCoords.Y1
				);
				break;

			case SM_Down:
				C.SetPos(
					(C.ClipX * W.PosX) + (W.OffsetX - Abs(W.TextureCoords.X2 - W.TextureCoords.X1) * XShifts[W.DrawPivot])
						* W.TextureScale * ResScaleY * HUDScale,
					(C.ClipY * W.PosY) + (W.OffsetY - Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1) * YShifts[W.DrawPivot])
						* W.TextureScale * ResScaleY * HUDScale
				);
				C.DrawTile(
					W.WidgetTexture,
					Abs(W.TextureCoords.X2 - W.TextureCoords.X1)
						* W.TextureScale * ResScaleY * HUDScale,
					Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1)
						* W.TextureScale * ResScaleY * HUDScale * W.Scale,
					W.TextureCoords.X1,
					W.TextureCoords.Y1,
					W.TextureCoords.X2 - W.TextureCoords.X1,
					(W.TextureCoords.Y2 - W.TextureCoords.Y1)
						* W.Scale
				);
				break;
			case SM_Up:
				C.SetPos(
					(C.ClipX * W.PosX) + (W.OffsetX - Abs(W.TextureCoords.X2 - W.TextureCoords.X1) * XShifts[W.DrawPivot])
						* W.TextureScale * ResScaleY * HUDScale,
					(C.ClipY * W.PosY) + (W.OffsetY - Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1) * YShifts[W.DrawPivot]
							+ Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1) * (1 - W.Scale))
						* W.TextureScale * ResScaleY * HUDScale
				);
				C.DrawTile(
					W.WidgetTexture,
					Abs(W.TextureCoords.X2 - W.TextureCoords.X1)
						* W.TextureScale * ResScaleY * HUDScale,
					Abs(W.TextureCoords.Y2 - W.TextureCoords.Y1)
						* W.TextureScale * ResScaleY * HUDScale * W.Scale,
					W.TextureCoords.X1,
					W.TextureCoords.Y1
						+ (W.TextureCoords.Y2 - W.TextureCoords.Y1) * (1 - W.Scale),
					W.TextureCoords.X2 - W.TextureCoords.X1,
					(W.TextureCoords.Y2 - W.TextureCoords.Y1)
						* W.Scale
				);
		}
	}
}

simulated final function DrawNumericTileWidget(Canvas C, NumericWidget W, DigitSet D)
{
	local String s;
	local array<String> t;
	local int padding, length, i;
	local byte coordindex;

	if (!HUDSettings.bEnableWidescreenFix) {
		DrawNumericWidget(C, W, D);
		return;
	}

	C.Style = W.RenderStyle;
	C.DrawColor = W.Tints[TeamIndex];

	s = String(W.Value);
	length = Len(s);

	padding = Max(0, W.MinDigitCount - length);

	if (W.bPadWithZeroes != 0)
		length += padding;
	for (i = 0; i < length; i++) {
		if (W.bPadWithZeroes == 1 && i < padding)
			t[i] = "0";
		else {
			t[i] = "";
			EatStr(t[i], s, 1);
		}
	}

	C.SetPos(
		(C.ClipX * W.PosX) + (W.OffsetX - (D.TextureCoords[0].X2 - D.TextureCoords[0].X1) * (((length + padding) * XShifts[W.DrawPivot]) - (padding * (1 - W.bPadWithZeroes))))
			* W.TextureScale * ResScaleY * HUDScale,
		(C.ClipY * W.PosY) + (W.OffsetY - (D.TextureCoords[0].Y2 - D.TextureCoords[0].Y1) * YShifts[W.DrawPivot])
			* W.TextureScale * ResScaleY * HUDScale
	);

	for (i = 0; i < length; i++) {
		if (t[i] == "-")
			coordindex = 10;
		else coordindex = byte(t[i]);

		C.DrawTile(
			D.DigitTexture,
			(D.TextureCoords[coordindex].X2 - D.TextureCoords[coordindex].X1)
				* W.TextureScale * ResScaleY * HUDScale,
			(D.TextureCoords[coordindex].Y2 - D.TextureCoords[coordindex].Y1)
				* W.TextureScale * ResScaleY * HUDScale,
			D.TextureCoords[coordindex].X1,
			D.TextureCoords[coordindex].Y1,
			D.TextureCoords[coordindex].X2 - D.TextureCoords[coordindex].X1,
			D.TextureCoords[coordindex].Y2 - D.TextureCoords[coordindex].Y1
		);
	}
}

simulated function DrawTeamRadar(Canvas C)
{
    local Pawn Pawn;
    local Vector eyePos;
    local UTComp_ServerReplicationInfo RepInfo;

    if(!Level.GRI.bTeamGame)
        return;

    //server disabled
    RepInfo = BS_xPlayer(PlayerOwner).RepInfo;
    if(RepInfo != None && !RepInfo.bAllowTeamRadar)
        return;

    //client disabled
    if(HUDSettings != None && !HUDSettings.bEnableTeamRadar)
        return;

    //not for spectators
    if(PlayerOwner.PlayerReplicationInfo!=None && PlayerOwner.PlayerReplicationInfo.bOnlySpectator)
        return;

    if(UEngine == none)
        foreach AllObjects(class'Engine', UEngine)
            break;

    if(UEngine != none)
    {
        foreach AllActors(class'Pawn', Pawn)
        {
            if(PawnOwner == Pawn)
                continue;
        
            if(Pawn.GetTeamNum() == PawnOwner.GetTeamNum())
            {
                eyePos = PlayerOwner.CalcViewLocation;
                if(VSize(eyePos - Pawn.Location) < RepInfo.TeamRadarCullDistance && !FastTrace(eyePos, Pawn.Location))
                {
                    if(ONSVehicle(Pawn) != None && !ONSVehicle(Pawn).IsVehicleEmpty())
                    {
                        UEngine.C_BrushWire = HUDSettings.TeamRadarVehicle;
                        C.DrawActor(Pawn, true, true);
                    }
                    else if(xPawn(Pawn) != None)
                    {
                        // player
                        UEngine.C_AnimMesh = HUDSettings.TeamRadarPlayer;
                        // player weapon
                        UEngine.C_BrushWire = HUDSettings.TeamRadarPlayer;
                        C.DrawActor(Pawn, true, true);
                    }

                }
            }
        }
    }
}

function Color GetHealthRampColor(PlayerReplicationInfo RepInfo)
{
    local color output;
    local Pawn P;

    output.R=255;
    output.G=255;
    output.B=255;
    output.A=255;

    P = Pawn(RepInfo.Owner);
    if(P != None)
    {
        if(P.Health >= 90)
        {
            output.R=0;
            output.G=0;
            output.B=255;
        }
        else if(P.Health >= 70)
        {
            output.R=0;
            output.G=255;
            output.B=0;
        }
        else if(P.Health >= 50)
        {
            output.R=255;
            output.G=255;
            output.B=0;
        }
        else if(P.Health >= 20)
        {
            output.R=255;
            output.G=0;
            output.B=0;
        }
    }

    return output;
}

simulated function DrawMutantStyleTeamRadar(Canvas C)
{
    local rotator Dir;
    local float Angle, VertDiff;
    local xPawn P;
    local Actor start;
    local float dist;
    local float scale;
    local float widescreenscale;

    // check server config
    if(BS_xPlayer(PlayerOwner).RepInfo == None || !BS_xPlayer(PlayerOwner).RepInfo.bAllowTeamRadarMap)
        return;

    // check client config
    if(HUDSettings == None || !HUDSettings.bEnableMapTeamRadar)
        return;

    C.Style = ERenderStyle.STY_Alpha;
    HUDXCen = HUDSettings.MapTeamRadarX;
    HUDYCen = HUDSettings.MapTeamRadarY;

    HUDCenterRadarBG.TextureScale = HUDSettings.MapTeamRadarScale;
    HUDCenterRadarBG.Tints[0].A = HUDSettings.MapTeamRadarAlpha;
    HUDCenterRadarBG.Tints[1].A = HUDSettings.MapTeamRadarAlpha;
    HUDCenterRadarBG.PosX = HUDXCen;
    HUDCenterRadarBG.PosY = HUDYCen;
    //DrawSpriteWidget (C, CenterRadarBG);
    // support widescreen
    DrawSpriteTileWidget(C, HUDCenterRadarBG);

   if(PlayerOwner.Pawn == None)
    {
        if(PlayerOwner.ViewTarget != None)
            Start = PlayerOwner.ViewTarget;
        else
            Start = PlayerOwner;
    }
    else
    {
        Start = PlayerOwner.Pawn;
    }

    foreach DynamicActors(class'xPawn', P)
    {
        if(PawnOwner.PlayerReplicationInfo.bOnlySpectator)
            continue;

        if(P == PawnOwner)
            continue;

        if(PawnOwner.GetTeamNum() != P.GetTeamNum())
            continue;

        Dir = rotator(P.Location - PawnOwner.Location);
        VertDiff = P.Location.Z - PawnOwner.Location.Z;

        Angle = ((Dir.Yaw - PawnOwner.Rotation.Yaw) & 65535) * 6.2832/65536;
        
        dist = VSize(P.Location - Start.Location);
        scale = 1.5 - dist/3000.0;
        scale = scale * HUDSettings.MapTeamRadarScale/0.77;
        // todo make dot size configurable, for now multi by 0.5 for medium size dot
        scale = scale * 0.5;
        scale = FClamp(scale, 0.5,2.0);        
        
        C.DrawColor = GetHealthRampColor(P.PlayerReplicationInfo);
        C.DrawColor.A = Clamp(HUDSettings.MapTeamRadarAlpha * 2.0,0,255);

        C.Style = ERenderStyle.STY_Alpha;

        //C.SetPos(XCen * C.ClipX + HudScale * XRad * C.ClipX * sin(Angle) - 0.5*BigDotSize*C.ClipX,
        //    YCen * C.ClipY - HudScale * YRad * C.ClipY * cos(Angle) - 0.5*BigDotSize*C.ClipX );

        // support widescreen
        widescreenscale=1.0;
        if(HUDSettings.bEnableWidescreenFix)
            widescreenscale=ResScaleX/ResScaleY;
        // fyi scale 0.77 matches texture size to default dot location
        C.SetPos(HUDXCen * C.ClipX + (HudScale / widescreenscale * HUDXRad * C.ClipX * sin(Angle) * HUDSettings.MapTeamRadarScale/0.77) - 0.5*scale*HUDBigDotSize*C.ClipX,
                 HUDYCen * C.ClipY - (HudScale * HUDYRad * C.ClipY * cos(Angle) * HUDSettings.MapTeamRadarScale/0.77) - 0.5*scale*HUDBigDotSize*C.ClipX);

        // dot
        C.DrawTile(Material'InterfaceContent.Hud.SkinA', scale*HUDBigDotSize*C.ClipX, scale*HUDBigDotSize*C.ClipX,838,238,144,144);


        C.SetPos(HUDXCen * C.ClipX + (HudScale / widescreenscale * HUDXRad * C.ClipX * sin(Angle) * HUDSettings.MapTeamRadarScale/0.77) - 0.5*scale*HUDBigDotSize*C.ClipX - 0.5*scale*HUDBigDotSize,
                 HUDYCen * C.ClipY - (HudScale * HUDYRad * C.ClipY * cos(Angle) * HUDSettings.MapTeamRadarScale/0.77) - 0.5*scale*HUDBigDotSize*C.ClipX);
        // plus/minus
        if(P.Location.Z > (PlayerOwner.ViewTarget.Location.Z + 176))
            C.DrawTile(HudzaxisTex, scale*HUDBigDotSize*C.ClipX, scale*HUDBigDotSize*C.ClipX, 80, 1, 78, 78); //plus
        else if (P.Location.Z < (PlayerOwner.ViewTarget.Location.Z - 176))
            C.DrawTile(HudzaxisTex, scale*HUDBigDotSize*C.ClipX, scale*HUDBigDotSize*C.ClipX, 160, 1, 78, 78); //minus
    }
}


simulated function UTComp_DrawRadarMapPawns(Canvas C, float CenterPosX, float CenterPosY, float RWidth, float RRange, float RTrans, float HScale, float IScale)
{
	local float PlayerIconSize, MapScale, MapRadarWidth;
	local vector HUDLocation, MCenter;
	local plane SavedModulation;
    local Pawn P;
    local ONSVehicle V;
    local int TeamNum;
    local color TeamColor;
    local bool bRenderTeamRadarMap;


    // check client and server setting
    bRenderTeamRadarMap = 
        BS_xPlayer(PlayerOwner).RepInfo != None 
        && HUDSettings != None 
        && BS_xPlayer(PlayerOwner).RepInfo.bAllowTeamRadar
        && HUDSettings.bEnableMapTeamRadar;

    if(bRenderTeamRadarMap)
    {
        if(PawnOwner != None)
            TeamNum = PawnOwner.GetTeamNum();

        if(TeamNum == 0)
            TeamColor = C.MakeColor(255,0,0);
        else
            TeamColor = C.MakeColor(0,0,255);

        MapRadarWidth = RWidth;
        PlayerIconSize = (IScale * 16 * C.ClipX * HScale/1600) * 1.5;
        MapScale = MapRadarWidth/RRange;        

        SavedModulation = C.ColorModulate;

        C.ColorModulate.X = 1;
        C.ColorModulate.Y = 1;
        C.ColorModulate.Z = 1;
        C.ColorModulate.W = 1;

        // Make sure that the canvas style is alpha
        C.Style = ERenderStyle.STY_Alpha;

        MapRadarWidth = RWidth;
        if (PawnOwner != None)
        {
            MCenter.X = 0.0;
            MCenter.Y = 0.0;
        }
        else
            MCenter = vect(0,0,0);

        HUDLocation.X = RWidth;
        HUDLocation.Y = RRange;
        HUDLocation.Z = RTrans;

        foreach DynamicActors(class'Pawn', P)
        {
            if(!P.bHidden && PawnOwner != None && TeamNum == P.GetTeamNum())
            {
                HUDLocation = P.Location - MCenter;
                HUDLocation.Z = 0;

                V = ONSVehicle(P);
                if (V != None)
                {
                    if(!V.IsVehicleEmpty())
                    {
                        // draw larger black dot (as outline)
                        C.DrawColor = C.MakeColor(0,0,0);
                        C.SetPos(CenterPosX + HUDLocation.X * MapScale - PlayerIconSize * (0.5 * 0.5 + 0.05), CenterPosY + HUDLocation.Y * MapScale - PlayerIconSize * (0.5 * 0.5 + 0.05));
                        C.DrawTile(Material'NewHUDIcons', PlayerIconSize * (0.5 + 0.1), PlayerIconSize * (0.5 + 0.1), 0, 0, 32, 32);

                        // draw dot on top of black dot
                        SetRadarVehicleData(V.Class, C.DrawColor);
                        C.SetPos(CenterPosX + HUDLocation.X * MapScale - PlayerIconSize * 0.5 * 0.5, CenterPosY + HUDLocation.Y * MapScale - PlayerIconSize * 0.5 * 0.5);
                        C.DrawTile(Material'NewHUDIcons', PlayerIconSize * 0.5, PlayerIconSize * 0.5, 0, 0, 32, 32);
                    }
                }
                else
                {
                    // pawn is a lot of things, we only want to draw xpawns
                    if(xPawn(P) != None)
                    {
                        // Only draw player dot if they aren't driving (we draw the vehicle dot instead)
                        if(P.DrivenVehicle == None)
                        {
                            // draw larger black dot (as outline)
                            C.DrawColor = C.MakeColor(0,0,0);
                            C.SetPos(CenterPosX + HUDLocation.X * MapScale - (PlayerIconSize * 0.5 * 0.25 + 1.0), CenterPosY + HUDLocation.Y * MapScale - (PlayerIconSize * 0.5 * 0.25 + 1.0));
                            C.DrawTile(Material'NewHUDIcons', PlayerIconSize * (0.25 + 0.1), PlayerIconSize * (0.25 + 0.1), 0, 0, 32, 32);

                            // draw dot on top of black dot
                            C.DrawColor = TeamColor;
                            C.SetPos(CenterPosX + HUDLocation.X * MapScale - PlayerIconSize * 0.5 * 0.25, CenterPosY + HUDLocation.Y * MapScale - PlayerIconSize * 0.5 * 0.25);
                            C.DrawTile(Material'NewHUDIcons', PlayerIconSize * 0.25, PlayerIconSize * 0.25, 0, 0, 32, 32);
                        }
                    }
                }
            }
        }

        C.ColorModulate = SavedModulation;
    }
}

function SetRadarVehicleData(class<Vehicle> VehicleClass, out color RadarColour)
{
    local int i;

    RadarColour.R=0;
    RadarColour.G=0;
    RadarColour.B=0;
    RadarColour.A=255;

    for(i=0;i<RadarVehicleData.Length;i++)
    {
        if(string(VehicleClass.Name) == RadarVehicleData[i].Name)
        {
            RadarColour=RadarVehicleData[i].RadarColor;
            RadarColour.A=255;
            return;
        }
    }

    SetRadarVehicleDataFallback(VehicleClass, RadarColour);
}

function SetRadarVehicleDataFallback(class<Vehicle> VehicleClass, out color RadarColour)
{
    local color RC;
    RC.R=0;
    RC.G=0;
    RC.B=0;
    RC.A=255;

    if(ClassIsChildOf(VehicleClass, class'ONSTreadCraft'))
    {
        //tank variant
        RC.R=128;
        RC.G=32;
        RC.B=128;
    }
    else if(ClassIsChildOf(VehicleClass, class'ONSChopperCraft'))
    {
        //raptor variant
        RC.R=128;
        RC.G=128;
        RC.B=0;
    }
    else if(ClassIsChildOf(VehicleClass, class'ONSHoverCraft'))
    {
        //manta variant
        RC.R=128;
        RC.G=128;
        RC.B=32;
    }
    else if(ClassIsChildOf(VehicleClass, class'ONSWheeledCraft'))
    {
        //bender/scorp variant
        RC.R=32;
        RC.G=128;
        RC.B=128;
    }

    RadarColour=RC;
}
